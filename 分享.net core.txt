预想一下。 你提了问题，按照底下学员的性格，会有哪几种情况出现， 你分别要说什么话，怎么去应对

 

第1节：

         一、什么是框架？

         二、.net core与.net farmework的区别  

         三、.net core web框架的启动原理

 

顺序：小开场 3 2 1+总结 演示+互动 讨论

准备：     PPT 

         一个例子，从控制台到web应用。要引用的库和代码需要提前写好和注释好

         提前打开VS，调整好字体、颜色、大小

 

--小开场--

         在座的很多都是老司机，或者将要成为老司机。向老司机前往的路上,熟悉自己的爱车，了解它的构造、运作原理是必须的过程。黄师傅肯定是不懂自己的车的，而特别厉害的老司机光听声音就知道这个车正常不正常了。

         会开车和懂车之是有明确的差别的，那么有没有那位同学能告诉我会车与懂车之间的明确区别呢？(等待有人回答，过个几秒如果没有人回答，再请一号托)

         托：会车只是点火走，会驾驶。而懂车不光要会这些，还非常清楚的知道自己车的具体情况，比如**车的组成部分**、油满能跑多远、动力如何、动力的传导这些。

 

         说的非常好，知道这些，我们就有潜力成长为一个懂车的老司机了。做为一名开发，我们同样需要知道自己的“车”到底是怎么回事，才能更好的在路上“呆虾户”。

 

--“车”的启动原理--

         既然今天是讲车的启动原理，那么我们需要先得知道它的构造，有那些组成部分了，然后就知道他是怎么跑起来的了。

         PPT中展示：一个汽车的图片， 然后用箭头指出关键部件。

                   引擎-提供动力，将其它能量转换成机械能。  --》    对于web应用来说，它的引擎就是将网络流与Http数据互相转换的程序 --> .net core中叫host宿主

                   车架-上层结构，可以扩展出不同的功能。比如座位、冰箱、货舱等。  -->  同样的，我们也需要一个“虚拟”的架子来支撑我们不同的功能模块。 -->.net core web框架

                   底盘-底层结构，支撑整车和传导动力。 --> 一样的，我们需要一个支撑业务功能与传导处理过程的结构。 --> http请求处理管道  我也叫他http请求流水线

                   有时底盘也不是必须的，摩托车上底盘这个概念就被弱化了。

 

         切换到VS，先运行例子中的hello world。

         最基础的东西我们有了，那么从最基础的socket套接字到我们熟知的web应用，还需要那些东西呢？(过一会 如果没有人回答再请二号托)

         这些需要的东西，就是我们这个车的发动机、底盘、车架了。

         【然后放开注释，演示最简单的get hello world】
中间会演示一下没有sartup类和没有web host的引入会有什么后果。
           这个是web应用的最小形态。完成这个形态后，能成功的从网络套接字处理数据，按http这种协议与外部沟通了。

         最基础的web应用非常简单，只有底盘与发动机，车架都没有，你需要自己搭建或购买(引包)。随心所欲，想怎么造车就怎么造车
         后面就不再打开代码，只用PPT了

 

         PPT中：

         用动画先演示有那些部分，组件。

         然后用选项卡的方式，分别说明不同组件干嘛的，核心作用是什么。(这部分做PPT了再想，想办法生动一点)

 

--转场--

其实到这里，今天的造车之旅就结束了。但是！！  不可能只分享这么一点东西给大家嘛。。  我知道有些团队正在使用.net core或向这边迁移。那么讲讲.net framework与.net core的区别就非常有必要了！

 

--.net core与.net farmework的区别--

 

(这段说话多， 想办法在PPT上生动起来)

 

farmework有很多年的历史了，它给人的感觉更多是重、封闭，特别是生态阿，非常不活跃。随着微软换了个掌柜之后，微软就想和大家一起把.net 生态圈搞起来。所以.net core就诞生了。在整个微软大圈子中，.net core也只是其中一环。他还有azure、office 365、windows 10 only等等。微软已经给世人一种更开放，拥抱大家的感觉。一个人的命运，当然要靠自我奋斗，但也要考虑到历史的进程。对于一家超级大公司来说更是如此，整个编程界活跃的东西都在向开源迈进，微软终于浪子回头了。


那么我们来看看在搞.net core这个东西时，到底干嘛了。 目前来看，他在.net上面主要做了3个微小的工作：
第一：源代码开源。 现在.net core的绝大部分代码都能在全球最大同性交友网站上面找到，通过阅读这些业界牛人写的代码学习一些编程技巧，也能查找一些低层的问题了。最少我个人就在翻阅源代码时学习到了一些，我去阅读它的代码时更多是想知道他们为什么要这样设计，这样设计有什么好处等等，也就是一些框架级别的经验。这些经验都被他们藏在代码里面了。 下一节分享中会分享一些我在其中获得的一些心得。

第二：建立.net starand 这样一个标准。以前的farmework阿，大家总觉得微软版本更新后有破坏性更新，导致项目很少有升级的。其实在.net 4之后已经很好的向下兼容了，但差印象留下了，而且留了很多年。这次他改头换面了！！！ .net starand主要是规定一些低层的API，并不会直接定义大家在开发业务时使用到的东西。而造轮子的人就轻松了，只要按这套标准来就好了，以后.net core升级时也能使用。 在轮子与框架实现之间，多了一层接口。

第三：拥抱跨平台和docker.  以前的C# .net windows SQL被认为是一个技术栈。windows上面跑服务程序行不行呢？肯定是没问题的！ 但其他技术栈很多都支持linux、mac，玩的人多了，自然对应的解决方案就多了起来。在作接触过系统级别框架的对此应该是有感触的，我们需要的各种组件、中间件在linux上相对好找的多。这次.net core终于实现了当年微软吹过的牛皮：一套语言、多个平台上运行。  目前我们公司应该没有在windows上跑.net core的程序吧？  linux、mac都支持了，那docker支持他们也一起搞了。.net core本来就轻，再加上docker的支持，那想搞集群服务的负担也轻的多了。

 

 你们以为今天的分享就结束了嘛？是？ 是你就错拉！！  
今天我们主要讲了.net core web框架的组成部分，但是了解这些我们仅仅是知道了他的“规则”，没有真正理解它。要真正理解它还是要靠个人去感悟的，我把去感悟的心得分享给大家。

要看懂别人的框架我觉得这个问题非常重要：
--什么是框架？--

         参考：《世说新语・方正》：“此郎亦管中窥豹，时见一斑。” 意思是从竹管里看豹，有时也能看见豹身上的一块斑纹。后来常与“可见一斑”连用，比喻可以从观察到的一部分推测全貌。也比喻看不到事物的全貌，只能是片面的了解。

         我个人认为框架这个东西是分为两个部分的。 框和架，框，框定边界；架，架起实现。
         框，（用手划一下框，PPT中也要有）。  这个字听起来就是干嘛的？ 做一些隔离嘛。。  我们写代码其实也是为了解决各种各样的问题，把不同的问题分开 一 一处理这样才最最吼的嘛。 所以先把不同的问题分开，框成一陀，就好办了。
         我们来现场设计一个功能看看： Excel导出类。将数据实体集合转换成excel文件流。你们会如何设计这样一个东西呢？
 
         在我们老项目中，有一个功能是excel导出。我们知道excel除了简单的表头、数据、还有不同样式的处理。而且我们还需要把代码中的实体集合转换成excel库识别的东西。 前辈怎么做的呢？
         以前的前辈搞了一个父类，然后定义了一堆虚方法、抽象方法让我们去实现。 我们只要把抽象方法实现了就解决了我们遇到的问题，再重写虚方法就能更加定制化。 最常用的就是setData这样一个方法，子类只需要填充数据就好了。当我们需要控制格式、控制标红标粗时，只需要重写一些虚方法就能搞定。
能这样快速的响应业务场景，也得益于前辈把“框”做的非常好。 试想，如果他让你重写的方法是一个模拟两可的东西，那怎么办？

      
         框说完了，我们来说架。（用手比划一个架子，PPT中也要有），他是一个开放的东西。你看这个架子就很开放嘛，只做了纵轴与横轴的支撑。你想在上面挂衣服还是挂你的臭袜子，这个就是你自己的事了。
        

         框和架组合在一起(PPT中合二为一)，框架它定义了不同的部分要干嘛，他们之间如间交互，明确了整体的一个运作模型。以前的框架呢，它想的是大而全，我把能遇到的情况都给你考虑了，你只需要实现对应的东西就行。而新式的设计思想是设计小而精，尽量开发扩展给你，他只做最核心，最少的事。
